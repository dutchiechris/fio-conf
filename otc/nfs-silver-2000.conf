# This workload definition matches a typical 'Silver' service level mix:
#
# (pattern) (read)   (write)
#    RND     37.5%    12.5%
#    SEQ     37.5%    12.5%
#
# To enforce this mix rate limits are used.  This configuration will attempt to
# create 1000 IOPs of the above mix.  See notes below how to adjust if you need
# more IOPs.
#
# Instructions for use:
# 1) Modify filename parameter to your test files.  Separate multiple files with a ":"
# 2) Start the workload
#    - For the full workload use:
#      fio nfs-silver-1000.conf
#    - To only run sequential component specify the sections like:
#      fio --section rnd-read --section rnd-write nfs-silver-1000.conf
# 3) Verify the desired throttle is applied and you are able to issue enough IOPs.
#  From fio status line output:
#  Jobs: 12 (f=24), CR=1000/0 IOPS: [r(5),w(5),R(1),W(1)] [0.0% done] [18640KB/0KB/0KB /s] [988/0/0 iops] [eta 23h:59m:27s]
#                      ^^^^                                                                 ^^^
#                    rate_iops                                                           actual iops
# 4) If the actual iops is lower than rate_iops you should increase parallelism by
#    adjusting the number of jobs (random) or the queue depth (sequential).  If
#    adjusting the number of jobs take care to re-calculate the rate_iops.
# 5) To simulate other IOPs levels modify in the Random and Sequential profiles
#    below.  Be sure to read the comments because there are some nuances!

[global]
ioengine=libaio
direct=1
filesize=50g
filename=/mnt/okATOSvol01/file:/mnt/okATOSvol02/file:/mnt/okATOSvol03/file:/mnt/okATOSvol04/file
thread
unified_rw_reporting=1
group_reporting=1
randrepeat=0
norandommap=1
buffer_compress_percentage=0
dedupe_percentage=0
scramble_buffers=1
refill_buffers
time_based
runtime=86400

## Random #####################################################################
# For random best to have multiple jobs (threads), each using the default
# iodepth=1.  The rate_iops is per job, so (numjobs * rate_iops) = IOPs of
# the profile.
###############################################################################

[rnd-read]
bs=8k
rw=randread
numjobs=5
rate_iops=150

[rnd-write]
bs=8k
rw=randwrite
numjobs=5
rate_iops=50

## Sequential #################################################################
# For sequential best to have fewer jobs (threads), but with a higher iodepth
# to ensure pattern appears sequential to the storage system. You may have to
# adjust the iodepth up or down to meet IOPs goal.  If too low you won't create
# enough IOPs (re: little's law) and if too high (i.e. more than the storage
# can service) queue time dominates reported latency.
# The rate_iops is per job, rate_iops = IOPs of the profile.
###############################################################################

[seq-read]
bs=32k
rw=read
numjobs=1
iodepth=64
rate_iops=750

[seq-write]
bs=32k
rw=write
numjobs=1
iodepth=64
rate_iops=250
